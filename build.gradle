plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.31'
}

group = 'io.kraftsman'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    invoker
}

dependencies {
    implementation "com.google.cloud.functions:functions-framework-api:$functions_framework_api_version"
    invoker "com.google.cloud.functions.invoker:java-function-invoker:$java_function_invoker_version"
    implementation "com.github.javafaker:javafaker:$javafaker_version"
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:$kotlinx_datetime_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_json_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '11'
}

tasks.register("runFunction", JavaExec) {
    group = "gcp"
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
    args(
            '--target', project.findProperty('runFunction.target'),
            '--port', project.findProperty('runFunction.port') ?: 8080
    )
    doFirst {
        args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
    }
}
